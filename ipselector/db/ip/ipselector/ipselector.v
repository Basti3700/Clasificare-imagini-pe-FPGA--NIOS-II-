// ipselector.v

// Generated using ACDS version 22.1 915

`timescale 1 ps / 1 ps
module ipselector (
		input  wire       button_rnd_export, // button_rnd.export
		input  wire       clk_clk,           //        clk.clk
		output wire [7:0] seg7_out_export    //   seg7_out.export
	);

	wire         ipselector_debug_reset_request_reset;                     // ipselector:debug_reset_request -> rst_controller:reset_in0
	wire  [31:0] ipselector_data_master_readdata;                          // mm_interconnect_0:ipselector_data_master_readdata -> ipselector:d_readdata
	wire         ipselector_data_master_waitrequest;                       // mm_interconnect_0:ipselector_data_master_waitrequest -> ipselector:d_waitrequest
	wire         ipselector_data_master_debugaccess;                       // ipselector:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:ipselector_data_master_debugaccess
	wire  [17:0] ipselector_data_master_address;                           // ipselector:d_address -> mm_interconnect_0:ipselector_data_master_address
	wire   [3:0] ipselector_data_master_byteenable;                        // ipselector:d_byteenable -> mm_interconnect_0:ipselector_data_master_byteenable
	wire         ipselector_data_master_read;                              // ipselector:d_read -> mm_interconnect_0:ipselector_data_master_read
	wire         ipselector_data_master_write;                             // ipselector:d_write -> mm_interconnect_0:ipselector_data_master_write
	wire  [31:0] ipselector_data_master_writedata;                         // ipselector:d_writedata -> mm_interconnect_0:ipselector_data_master_writedata
	wire  [31:0] ipselector_instruction_master_readdata;                   // mm_interconnect_0:ipselector_instruction_master_readdata -> ipselector:i_readdata
	wire         ipselector_instruction_master_waitrequest;                // mm_interconnect_0:ipselector_instruction_master_waitrequest -> ipselector:i_waitrequest
	wire  [17:0] ipselector_instruction_master_address;                    // ipselector:i_address -> mm_interconnect_0:ipselector_instruction_master_address
	wire         ipselector_instruction_master_read;                       // ipselector:i_read -> mm_interconnect_0:ipselector_instruction_master_read
	wire         mm_interconnect_0_debug_avalon_jtag_slave_chipselect;     // mm_interconnect_0:debug_avalon_jtag_slave_chipselect -> debug:av_chipselect
	wire  [31:0] mm_interconnect_0_debug_avalon_jtag_slave_readdata;       // debug:av_readdata -> mm_interconnect_0:debug_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_debug_avalon_jtag_slave_waitrequest;    // debug:av_waitrequest -> mm_interconnect_0:debug_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_debug_avalon_jtag_slave_address;        // mm_interconnect_0:debug_avalon_jtag_slave_address -> debug:av_address
	wire         mm_interconnect_0_debug_avalon_jtag_slave_read;           // mm_interconnect_0:debug_avalon_jtag_slave_read -> debug:av_read_n
	wire         mm_interconnect_0_debug_avalon_jtag_slave_write;          // mm_interconnect_0:debug_avalon_jtag_slave_write -> debug:av_write_n
	wire  [31:0] mm_interconnect_0_debug_avalon_jtag_slave_writedata;      // mm_interconnect_0:debug_avalon_jtag_slave_writedata -> debug:av_writedata
	wire         mm_interconnect_0_nios_top_avalon_slave_0_chipselect;     // mm_interconnect_0:nios_top_avalon_slave_0_chipselect -> nios_top:chipselect
	wire   [7:0] mm_interconnect_0_nios_top_avalon_slave_0_readdata;       // nios_top:dataread -> mm_interconnect_0:nios_top_avalon_slave_0_readdata
	wire   [1:0] mm_interconnect_0_nios_top_avalon_slave_0_address;        // mm_interconnect_0:nios_top_avalon_slave_0_address -> nios_top:address
	wire         mm_interconnect_0_nios_top_avalon_slave_0_write;          // mm_interconnect_0:nios_top_avalon_slave_0_write -> nios_top:write
	wire   [7:0] mm_interconnect_0_nios_top_avalon_slave_0_writedata;      // mm_interconnect_0:nios_top_avalon_slave_0_writedata -> nios_top:writedata
	wire  [31:0] mm_interconnect_0_ipselector_debug_mem_slave_readdata;    // ipselector:debug_mem_slave_readdata -> mm_interconnect_0:ipselector_debug_mem_slave_readdata
	wire         mm_interconnect_0_ipselector_debug_mem_slave_waitrequest; // ipselector:debug_mem_slave_waitrequest -> mm_interconnect_0:ipselector_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_ipselector_debug_mem_slave_debugaccess; // mm_interconnect_0:ipselector_debug_mem_slave_debugaccess -> ipselector:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_ipselector_debug_mem_slave_address;     // mm_interconnect_0:ipselector_debug_mem_slave_address -> ipselector:debug_mem_slave_address
	wire         mm_interconnect_0_ipselector_debug_mem_slave_read;        // mm_interconnect_0:ipselector_debug_mem_slave_read -> ipselector:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_ipselector_debug_mem_slave_byteenable;  // mm_interconnect_0:ipselector_debug_mem_slave_byteenable -> ipselector:debug_mem_slave_byteenable
	wire         mm_interconnect_0_ipselector_debug_mem_slave_write;       // mm_interconnect_0:ipselector_debug_mem_slave_write -> ipselector:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_ipselector_debug_mem_slave_writedata;   // mm_interconnect_0:ipselector_debug_mem_slave_writedata -> ipselector:debug_mem_slave_writedata
	wire         mm_interconnect_0_sdram_s1_chipselect;                    // mm_interconnect_0:sdram_s1_chipselect -> sdram:chipselect
	wire  [15:0] mm_interconnect_0_sdram_s1_readdata;                      // sdram:readdata -> mm_interconnect_0:sdram_s1_readdata
	wire  [14:0] mm_interconnect_0_sdram_s1_address;                       // mm_interconnect_0:sdram_s1_address -> sdram:address
	wire   [1:0] mm_interconnect_0_sdram_s1_byteenable;                    // mm_interconnect_0:sdram_s1_byteenable -> sdram:byteenable
	wire         mm_interconnect_0_sdram_s1_write;                         // mm_interconnect_0:sdram_s1_write -> sdram:write
	wire  [15:0] mm_interconnect_0_sdram_s1_writedata;                     // mm_interconnect_0:sdram_s1_writedata -> sdram:writedata
	wire         mm_interconnect_0_sdram_s1_clken;                         // mm_interconnect_0:sdram_s1_clken -> sdram:clken
	wire  [31:0] mm_interconnect_0_button_s1_readdata;                     // button:readdata -> mm_interconnect_0:button_s1_readdata
	wire   [1:0] mm_interconnect_0_button_s1_address;                      // mm_interconnect_0:button_s1_address -> button:address
	wire         mm_interconnect_0_seg7_s1_chipselect;                     // mm_interconnect_0:seg7_s1_chipselect -> seg7:chipselect
	wire  [31:0] mm_interconnect_0_seg7_s1_readdata;                       // seg7:readdata -> mm_interconnect_0:seg7_s1_readdata
	wire   [1:0] mm_interconnect_0_seg7_s1_address;                        // mm_interconnect_0:seg7_s1_address -> seg7:address
	wire         mm_interconnect_0_seg7_s1_write;                          // mm_interconnect_0:seg7_s1_write -> seg7:write_n
	wire  [31:0] mm_interconnect_0_seg7_s1_writedata;                      // mm_interconnect_0:seg7_s1_writedata -> seg7:writedata
	wire         irq_mapper_receiver0_irq;                                 // debug:av_irq -> irq_mapper:receiver0_irq
	wire  [31:0] ipselector_irq_irq;                                       // irq_mapper:sender_irq -> ipselector:irq
	wire         rst_controller_reset_out_reset;                           // rst_controller:reset_out -> [button:reset_n, debug:rst_n, ipselector:reset_n, irq_mapper:reset, mm_interconnect_0:ipselector_reset_reset_bridge_in_reset_reset, nios_top:reset_n, rst_translator:in_reset, sdram:reset, seg7:reset_n]
	wire         rst_controller_reset_out_reset_req;                       // rst_controller:reset_req -> [ipselector:reset_req, rst_translator:reset_req_in, sdram:reset_req]

	ipselector_button button (
		.clk      (clk_clk),                              //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address  (mm_interconnect_0_button_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_button_s1_readdata), //                    .readdata
		.in_port  (button_rnd_export)                     // external_connection.export
	);

	ipselector_debug debug (
		.clk            (clk_clk),                                               //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                       //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_debug_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_debug_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_debug_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_debug_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_debug_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_debug_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_debug_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver0_irq)                               //               irq.irq
	);

	ipselector_ipselector ipselector (
		.clk                                 (clk_clk),                                                  //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                          //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                       //                          .reset_req
		.d_address                           (ipselector_data_master_address),                           //               data_master.address
		.d_byteenable                        (ipselector_data_master_byteenable),                        //                          .byteenable
		.d_read                              (ipselector_data_master_read),                              //                          .read
		.d_readdata                          (ipselector_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (ipselector_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (ipselector_data_master_write),                             //                          .write
		.d_writedata                         (ipselector_data_master_writedata),                         //                          .writedata
		.debug_mem_slave_debugaccess_to_roms (ipselector_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (ipselector_instruction_master_address),                    //        instruction_master.address
		.i_read                              (ipselector_instruction_master_read),                       //                          .read
		.i_readdata                          (ipselector_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (ipselector_instruction_master_waitrequest),                //                          .waitrequest
		.irq                                 (ipselector_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (ipselector_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_ipselector_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_ipselector_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_ipselector_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_ipselector_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_ipselector_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_ipselector_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_ipselector_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_ipselector_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                          // custom_instruction_master.readra
	);

	tops nios_top (
		.clk        (clk_clk),                                              //          clock.clk
		.address    (mm_interconnect_0_nios_top_avalon_slave_0_address),    // avalon_slave_0.address
		.chipselect (mm_interconnect_0_nios_top_avalon_slave_0_chipselect), //               .chipselect
		.write      (mm_interconnect_0_nios_top_avalon_slave_0_write),      //               .write
		.writedata  (mm_interconnect_0_nios_top_avalon_slave_0_writedata),  //               .writedata
		.dataread   (mm_interconnect_0_nios_top_avalon_slave_0_readdata),   //               .readdata
		.reset_n    (~rst_controller_reset_out_reset)                       //          reset.reset_n
	);

	ipselector_sdram sdram (
		.clk        (clk_clk),                               //   clk1.clk
		.address    (mm_interconnect_0_sdram_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_sdram_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_sdram_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_sdram_s1_write),      //       .write
		.readdata   (mm_interconnect_0_sdram_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_sdram_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_sdram_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),        // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),    //       .reset_req
		.freeze     (1'b0)                                   // (terminated)
	);

	ipselector_seg7 seg7 (
		.clk        (clk_clk),                              //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address    (mm_interconnect_0_seg7_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_seg7_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_seg7_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_seg7_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_seg7_s1_readdata),   //                    .readdata
		.out_port   (seg7_out_export)                       // external_connection.export
	);

	ipselector_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                (clk_clk),                                                  //                              clk_0_clk.clk
		.ipselector_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                           // ipselector_reset_reset_bridge_in_reset.reset
		.ipselector_data_master_address               (ipselector_data_master_address),                           //                 ipselector_data_master.address
		.ipselector_data_master_waitrequest           (ipselector_data_master_waitrequest),                       //                                       .waitrequest
		.ipselector_data_master_byteenable            (ipselector_data_master_byteenable),                        //                                       .byteenable
		.ipselector_data_master_read                  (ipselector_data_master_read),                              //                                       .read
		.ipselector_data_master_readdata              (ipselector_data_master_readdata),                          //                                       .readdata
		.ipselector_data_master_write                 (ipselector_data_master_write),                             //                                       .write
		.ipselector_data_master_writedata             (ipselector_data_master_writedata),                         //                                       .writedata
		.ipselector_data_master_debugaccess           (ipselector_data_master_debugaccess),                       //                                       .debugaccess
		.ipselector_instruction_master_address        (ipselector_instruction_master_address),                    //          ipselector_instruction_master.address
		.ipselector_instruction_master_waitrequest    (ipselector_instruction_master_waitrequest),                //                                       .waitrequest
		.ipselector_instruction_master_read           (ipselector_instruction_master_read),                       //                                       .read
		.ipselector_instruction_master_readdata       (ipselector_instruction_master_readdata),                   //                                       .readdata
		.button_s1_address                            (mm_interconnect_0_button_s1_address),                      //                              button_s1.address
		.button_s1_readdata                           (mm_interconnect_0_button_s1_readdata),                     //                                       .readdata
		.debug_avalon_jtag_slave_address              (mm_interconnect_0_debug_avalon_jtag_slave_address),        //                debug_avalon_jtag_slave.address
		.debug_avalon_jtag_slave_write                (mm_interconnect_0_debug_avalon_jtag_slave_write),          //                                       .write
		.debug_avalon_jtag_slave_read                 (mm_interconnect_0_debug_avalon_jtag_slave_read),           //                                       .read
		.debug_avalon_jtag_slave_readdata             (mm_interconnect_0_debug_avalon_jtag_slave_readdata),       //                                       .readdata
		.debug_avalon_jtag_slave_writedata            (mm_interconnect_0_debug_avalon_jtag_slave_writedata),      //                                       .writedata
		.debug_avalon_jtag_slave_waitrequest          (mm_interconnect_0_debug_avalon_jtag_slave_waitrequest),    //                                       .waitrequest
		.debug_avalon_jtag_slave_chipselect           (mm_interconnect_0_debug_avalon_jtag_slave_chipselect),     //                                       .chipselect
		.ipselector_debug_mem_slave_address           (mm_interconnect_0_ipselector_debug_mem_slave_address),     //             ipselector_debug_mem_slave.address
		.ipselector_debug_mem_slave_write             (mm_interconnect_0_ipselector_debug_mem_slave_write),       //                                       .write
		.ipselector_debug_mem_slave_read              (mm_interconnect_0_ipselector_debug_mem_slave_read),        //                                       .read
		.ipselector_debug_mem_slave_readdata          (mm_interconnect_0_ipselector_debug_mem_slave_readdata),    //                                       .readdata
		.ipselector_debug_mem_slave_writedata         (mm_interconnect_0_ipselector_debug_mem_slave_writedata),   //                                       .writedata
		.ipselector_debug_mem_slave_byteenable        (mm_interconnect_0_ipselector_debug_mem_slave_byteenable),  //                                       .byteenable
		.ipselector_debug_mem_slave_waitrequest       (mm_interconnect_0_ipselector_debug_mem_slave_waitrequest), //                                       .waitrequest
		.ipselector_debug_mem_slave_debugaccess       (mm_interconnect_0_ipselector_debug_mem_slave_debugaccess), //                                       .debugaccess
		.nios_top_avalon_slave_0_address              (mm_interconnect_0_nios_top_avalon_slave_0_address),        //                nios_top_avalon_slave_0.address
		.nios_top_avalon_slave_0_write                (mm_interconnect_0_nios_top_avalon_slave_0_write),          //                                       .write
		.nios_top_avalon_slave_0_readdata             (mm_interconnect_0_nios_top_avalon_slave_0_readdata),       //                                       .readdata
		.nios_top_avalon_slave_0_writedata            (mm_interconnect_0_nios_top_avalon_slave_0_writedata),      //                                       .writedata
		.nios_top_avalon_slave_0_chipselect           (mm_interconnect_0_nios_top_avalon_slave_0_chipselect),     //                                       .chipselect
		.sdram_s1_address                             (mm_interconnect_0_sdram_s1_address),                       //                               sdram_s1.address
		.sdram_s1_write                               (mm_interconnect_0_sdram_s1_write),                         //                                       .write
		.sdram_s1_readdata                            (mm_interconnect_0_sdram_s1_readdata),                      //                                       .readdata
		.sdram_s1_writedata                           (mm_interconnect_0_sdram_s1_writedata),                     //                                       .writedata
		.sdram_s1_byteenable                          (mm_interconnect_0_sdram_s1_byteenable),                    //                                       .byteenable
		.sdram_s1_chipselect                          (mm_interconnect_0_sdram_s1_chipselect),                    //                                       .chipselect
		.sdram_s1_clken                               (mm_interconnect_0_sdram_s1_clken),                         //                                       .clken
		.seg7_s1_address                              (mm_interconnect_0_seg7_s1_address),                        //                                seg7_s1.address
		.seg7_s1_write                                (mm_interconnect_0_seg7_s1_write),                          //                                       .write
		.seg7_s1_readdata                             (mm_interconnect_0_seg7_s1_readdata),                       //                                       .readdata
		.seg7_s1_writedata                            (mm_interconnect_0_seg7_s1_writedata),                      //                                       .writedata
		.seg7_s1_chipselect                           (mm_interconnect_0_seg7_s1_chipselect)                      //                                       .chipselect
	);

	ipselector_irq_mapper irq_mapper (
		.clk           (clk_clk),                        //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.sender_irq    (ipselector_irq_irq)              //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (ipselector_debug_reset_request_reset), // reset_in0.reset
		.clk            (clk_clk),                              //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),       // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req),   //          .reset_req
		.reset_req_in0  (1'b0),                                 // (terminated)
		.reset_in1      (1'b0),                                 // (terminated)
		.reset_req_in1  (1'b0),                                 // (terminated)
		.reset_in2      (1'b0),                                 // (terminated)
		.reset_req_in2  (1'b0),                                 // (terminated)
		.reset_in3      (1'b0),                                 // (terminated)
		.reset_req_in3  (1'b0),                                 // (terminated)
		.reset_in4      (1'b0),                                 // (terminated)
		.reset_req_in4  (1'b0),                                 // (terminated)
		.reset_in5      (1'b0),                                 // (terminated)
		.reset_req_in5  (1'b0),                                 // (terminated)
		.reset_in6      (1'b0),                                 // (terminated)
		.reset_req_in6  (1'b0),                                 // (terminated)
		.reset_in7      (1'b0),                                 // (terminated)
		.reset_req_in7  (1'b0),                                 // (terminated)
		.reset_in8      (1'b0),                                 // (terminated)
		.reset_req_in8  (1'b0),                                 // (terminated)
		.reset_in9      (1'b0),                                 // (terminated)
		.reset_req_in9  (1'b0),                                 // (terminated)
		.reset_in10     (1'b0),                                 // (terminated)
		.reset_req_in10 (1'b0),                                 // (terminated)
		.reset_in11     (1'b0),                                 // (terminated)
		.reset_req_in11 (1'b0),                                 // (terminated)
		.reset_in12     (1'b0),                                 // (terminated)
		.reset_req_in12 (1'b0),                                 // (terminated)
		.reset_in13     (1'b0),                                 // (terminated)
		.reset_req_in13 (1'b0),                                 // (terminated)
		.reset_in14     (1'b0),                                 // (terminated)
		.reset_req_in14 (1'b0),                                 // (terminated)
		.reset_in15     (1'b0),                                 // (terminated)
		.reset_req_in15 (1'b0)                                  // (terminated)
	);

endmodule
