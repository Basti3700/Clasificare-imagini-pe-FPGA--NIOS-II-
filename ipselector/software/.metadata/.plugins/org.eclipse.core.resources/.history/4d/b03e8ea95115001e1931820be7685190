/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <system.h>
#include <io.h>
#include "altera_avalon_pio_regs.h"

int segments[10] = {
		0xC0,  //0x3F, // 0
		0xF9,  //0x06, // 1
		0xA4,  //0x5B, // 2
		0xB0,  //0x4F, // 3
		0x99,  //0x66, // 4
		0x92,  //0x6D, // 5
		0x82,  //0x7D, // 6
		0xF8,  // 0x07, // 7
		0x80,   //0x7F, // 8
		0x90   //0x6F  // 9
};

int main(void)
{
printf("Welcome to Custom IP Demo 2!\n");

    int counter = 0;
    int rand_num = 0;
    alt_32  nr_afis;
    //int nr_afis = 0;
    int button_state = 0;
    int button_prev_state = 0;
    int start = 0;
    int nr_normal;
    int nr;
    srand(time(NULL)); // Seed the random number generator with the current time

    while (1)
    {

        button_state = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
        if (button_state == 0) {
        	start = 0;
        }else if (button_state == 1) {
        	start = 1;
        }
        printf("button_state: %d\n", button_state);
        printf("start: %d\n", start);

        nr_afis = IORD_ALTERA_AVALON_PIO_DATA(NIOS_TOP_BASE);
        if (nr_afis==16843009){
        	nr_normal = 1;
        }else if (nr_afis==33686018){
        	nr_normal=2;
        }else if (nr_afis==50529027){
        	nr_normal=3;
        }else if (nr_afis==67372036){
        	nr_normal=4;
        }else if (nr_afis==84215045){
        	nr_normal=5;
        }else if (nr_afis==101058054){
        	nr_normal=6;
        }else if (nr_afis==117901063){
        	nr_normal=7;
        }else if (nr_afis==134744072){
        	nr_normal=8;
        }else if (nr_afis==151587081){
        	nr_normal=9;
        }else if (nr_afis==0){
                	nr_normal=0;
                }
        printf("nr: %d\n", nr);
        int segment_data = segments[nr_normal];
        IOWR_ALTERA_AVALON_PIO_DATA(SEG7_BASE, segment_data);

        if (button_state == 0 && button_prev_state == 1)
        {
			rand_num = rand() % (counter + 1);
            int digit = rand_num % 32;
             nr = rand_num % 10;

            printf("digit: %d\n", digit);
            //printf("nr: %d\n", nr);
            printf("start: %d\n", start);


            IOWR(NIOS_TOP_BASE, 1, start);
			IOWR(NIOS_TOP_BASE, 0, digit);

        }
        else if (button_state == 1 && button_prev_state == 0)
        {
            // Increment the counter
            counter++;
        }



        // Store the button state for the next iteration
        button_prev_state = button_state;

        usleep(100000);
    }

    return 0;
}
